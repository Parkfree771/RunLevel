{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/getTrainingPlan.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\n// 데이터 구조 정의\nexport interface WeeklySchedule {\n  day: string;\n  type: string;\n  content: string;\n  tips: string;\n}\n\nexport interface TrainingPlan {\n  title: string;\n  target: string;\n  schedule: WeeklySchedule[];\n}\n\n// 텍스트 파일에서 모든 계획을 파싱하는 내부 함수\nfunction parseTrainingFile(fileContent: string): TrainingPlan[] {\n  const lines = fileContent.split('\\n').map(line => line.trim()).filter(line => line);\n  const plans: TrainingPlan[] = [];\n  let currentPlan: TrainingPlan | null = null;\n  let scheduleStarted = false;\n\n  for (const line of lines) {\n    if (line.match(/^\\d+\\./)) { // \"1.\", \"2.\" 등 새로운 훈련 계획 시작\n      if (currentPlan) {\n        plans.push(currentPlan);\n      }\n      const titleMatch = line.match(/^\\d+\\.\\s*(.*?)(?:을 위한|목표)/);\n      const targetMatch = line.match(/목표:\\s*(.*)/);\n      \n      currentPlan = {\n        title: titleMatch ? titleMatch[1].trim() : '소제목 없음',\n        target: targetMatch ? targetMatch[1].trim() : '목표 없음',\n        schedule: [],\n      };\n      scheduleStarted = false;\n    } else if (line.startsWith('요일')) {\n      scheduleStarted = true;\n    } else if (currentPlan && scheduleStarted && !line.includes('Workout Type')) {\n      const parts = line.split('\\t').map(p => p.trim()).filter(p => p);\n      if (parts.length >= 3) {\n        currentPlan.schedule.push({\n          day: parts[0],\n          type: parts[1],\n          content: parts[2],\n          tips: parts[3] || '',\n        });\n      }\n    }\n  }\n\n  if (currentPlan) {\n    plans.push(currentPlan);\n  }\n  return plans;\n}\n\n// 특정 레벨에 맞는 훈련 계획 하나만 가져오는 함수\nexport function getTargetedTrainingPlan(\n  gender: 'male' | 'female',\n  distance: '10km' | 'Half Marathon' | 'Full Marathon',\n  level: 'belowAverage' | 'average' | 'aboveAverage'\n): TrainingPlan | null {\n  const genderMap = { male: '남성', female: '여성' };\n  const distanceMap = { '10km': '10km', 'Half Marathon': '하프', 'Full Marathon': '풀코스' };\n\n  const filename = `${genderMap[gender]} ${distanceMap[distance]} 한글.txt`;\n  const filePath = path.join(process.cwd(), '훈련 프로그램 데이터', filename);\n\n  try {\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const allPlans = parseTrainingFile(fileContent);\n\n    const levelIndexMap = {\n      belowAverage: 0, // D,C 등급은 첫번째 플랜\n      average: 1,      // B 등급은 두번째 플랜\n      aboveAverage: 2  // A,S 등급은 세번째 플랜\n    };\n\n    const planIndex = levelIndexMap[level];\n    \n    return allPlans[planIndex] || null;\n\n  } catch (error) {\n    console.error(`Error reading or parsing file ${filename}:`, error);\n    return null;\n  }\n}"],"names":[],"mappings":";;;;;;;;AAiBA,6BAA6B;AAC7B,SAAS,kBAAkB,WAAmB;IAC5C,MAAM,QAAQ,YAAY,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,CAAA,OAAQ;IAC9E,MAAM,QAAwB,EAAE;IAChC,IAAI,cAAmC;IACvC,IAAI,kBAAkB;IAEtB,KAAK,MAAM,QAAQ,MAAO;QACxB,IAAI,KAAK,KAAK,CAAC,WAAW;YACxB,IAAI,aAAa;gBACf,MAAM,IAAI,CAAC;YACb;YACA,MAAM,aAAa,KAAK,KAAK,CAAC;YAC9B,MAAM,cAAc,KAAK,KAAK,CAAC;YAE/B,cAAc;gBACZ,OAAO,aAAa,UAAU,CAAC,EAAE,CAAC,IAAI,KAAK;gBAC3C,QAAQ,cAAc,WAAW,CAAC,EAAE,CAAC,IAAI,KAAK;gBAC9C,UAAU,EAAE;YACd;YACA,kBAAkB;QACpB,OAAO,IAAI,KAAK,UAAU,CAAC,OAAO;YAChC,kBAAkB;QACpB,OAAO,IAAI,eAAe,mBAAmB,CAAC,KAAK,QAAQ,CAAC,iBAAiB;YAC3E,MAAM,QAAQ,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,IAAI,MAAM,CAAC,CAAA,IAAK;YAC9D,IAAI,MAAM,MAAM,IAAI,GAAG;gBACrB,YAAY,QAAQ,CAAC,IAAI,CAAC;oBACxB,KAAK,KAAK,CAAC,EAAE;oBACb,MAAM,KAAK,CAAC,EAAE;oBACd,SAAS,KAAK,CAAC,EAAE;oBACjB,MAAM,KAAK,CAAC,EAAE,IAAI;gBACpB;YACF;QACF;IACF;IAEA,IAAI,aAAa;QACf,MAAM,IAAI,CAAC;IACb;IACA,OAAO;AACT;AAGO,SAAS,wBACd,MAAyB,EACzB,QAAoD,EACpD,KAAkD;IAElD,MAAM,YAAY;QAAE,MAAM;QAAM,QAAQ;IAAK;IAC7C,MAAM,cAAc;QAAE,QAAQ;QAAQ,iBAAiB;QAAM,iBAAiB;IAAM;IAEpF,MAAM,WAAW,CAAC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;IACvE,MAAM,WAAW,uCAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe;IAEzD,IAAI;QACF,MAAM,cAAc,qCAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC9C,MAAM,WAAW,kBAAkB;QAEnC,MAAM,gBAAgB;YACpB,cAAc;YACd,SAAS;YACT,cAAc,EAAG,iBAAiB;QACpC;QAEA,MAAM,YAAY,aAAa,CAAC,MAAM;QAEtC,OAAO,QAAQ,CAAC,UAAU,IAAI;IAEhC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC,EAAE;QAC5D,OAAO;IACT;AACF"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/training-plan/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { getTargetedTrainingPlan } from '@/lib/getTrainingPlan';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const gender = searchParams.get('gender') as 'male' | 'female';\n  const distance = searchParams.get('distance') as '10km' | 'Half Marathon' | 'Full Marathon';\n  const level = searchParams.get('level') as 'belowAverage' | 'average' | 'aboveAverage';\n\n  if (!gender || !distance || !level) {\n    return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 });\n  }\n\n  try {\n    const plan = getTargetedTrainingPlan(gender, distance, level);\n\n    if (!plan) {\n      return NextResponse.json({ error: 'Training plan not found' }, { status: 404 });\n    }\n\n    return NextResponse.json(plan);\n  } catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAGO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,WAAW,aAAa,GAAG,CAAC;IAClC,MAAM,QAAQ,aAAa,GAAG,CAAC;IAE/B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,IAAI;QACF,MAAM,OAAO,CAAA,GAAA,+HAAA,CAAA,0BAAuB,AAAD,EAAE,QAAQ,UAAU;QAEvD,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}